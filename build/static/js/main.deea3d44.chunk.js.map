{"version":3,"sources":["types/company.ts","hooks/i18n/en_US.ts","hooks/i18n/i18n.ts","setup/company.ts","types/search.ts","components/Pill.tsx","components/CompanyResult.tsx","components/SearchResults.tsx","components/ButtonBar.tsx","setup/clause.ts","components/Clause.tsx","components/Clauses.tsx","components/SearchHeader.tsx","components/SearchBox.tsx","hooks/getData.ts","hooks/search.ts","components/SearchContainer.tsx","components/TakeHome.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CompanyHighlightCategory","translations","addNew","and","companyName","contains","delete","description","descriptionHeader","doesNotContain","error","highlights","highlightsHeader","isEmpty","isExactly","isNotEmpty","nameHeader","noResults","or","saveAsNewSearch","saveNotificationTitle","saveNotificationMsg","search","searchTitle","searchTitleTip","where","t","key","I18nStrings","Field","Operation","Combination","colorMap","IS_HARMONIC","MAKES_LOTTA_MONEY","getColor","highlight","Wrapper","styled","div","props","color","Pill","category","Text","size","text","CompanyResult","company","TableRow","TableCell","scope","weight","name","map","SearchResults","results","Table","TableHeader","border","TableBody","length","result","id","DEFAULT_FIELD","COMPANY","DEFAULT_OPERATION","CONTAINS","ButtonBar","onSaveClick","onSearchClick","Box","gap","justify","direction","Button","secondary","label","onClick","primary","allOperations","DOES_NOT_CONTAIN","IS_EMPTY","IS_EXACTLY","IS_NOT_EMPTY","binaryOperations","fieldSetup","field","operations","DESCRIPTION","HIGHLIGHTS","operationsSetup","showOperand","fieldMap","Clause","clause","onDelete","onChange","fieldLabels","handleFieldChange","newFieldName","newField","find","item","Object","assign","handleOperationChange","newOperation","operation","handleOperandChange","newOperand","operand","leftLabel","combination","FIRST","AND","align","width","alignContent","Select","options","value","labelKey","valueLabel","pad","TextInput","placeholder","event","target","Menu","items","Clauses","query","onAddNewAnd","onAddNewOr","handleClauseChange","newClause","index","HeaderText","SearchHeader","SearchBox","open","setOpen","useState","uuidv4","setQuery","Card","background","CardHeader","CardBody","animation","oldQuery","OR","filter","newQuery","MOCK_URL","window","location","origin","pathname","useGetData","url","status","setStatus","setResults","useEffect","fetchData","a","fetch","response","json","data","console","useReadData","combine","b","bIds","Set","forEach","add","has","intersect","runQueryOverResults","filteredResults","fieldName","toLowerCase","indexOf","Boolean","runClauseOverResults","accum","i","SearchContainer","searchResults","setSearchResults","showSaveNotification","setShowSaveNotification","saveQuery","log","JSON","stringify","Spinner","newSearchResults","Notification","toast","title","message","onClose","TakeHome","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deea3d44.chunk.js","sourcesContent":["// Types for company data\r\n\r\nexport interface Highlight {\r\n  category: CompanyHighlightCategory;\r\n  date_added?: Date;\r\n  text?: string;\r\n}\r\n\r\nexport interface Company {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  highlights: Highlight[];\r\n}\r\n\r\nexport enum CompanyHighlightCategory {\r\n  MAKES_LOTTA_MONEY = \"MAKES_LOTTA_MONEY\",\r\n  IS_HARMONIC = \"IS_HARMNOIC\", // [sic]\r\n}\r\n","const translations = {\r\n  addNew: \"+ Add New Filter\",\r\n  and: \"AND\",\r\n  companyName: \"Company Name\",\r\n  contains: \"Contains\",\r\n  delete: \"Delete\",\r\n  description: \"Description\",\r\n  descriptionHeader: \"Description\",\r\n  doesNotContain: \"Does not contain\",\r\n  error: \"An error has occurred\",\r\n  highlights: \"Highlights\",\r\n  highlightsHeader: \"Highlights\",\r\n  isEmpty: \"Is Empty\",\r\n  isExactly: \"Is exactly\",\r\n  isNotEmpty: \"Is not empty\",\r\n  nameHeader: \"Name\",\r\n  noResults: \"No Results\",\r\n  or: \"OR\",\r\n  saveAsNewSearch: \"Save as new search\",\r\n  saveNotificationTitle: \"Notification\",\r\n  saveNotificationMsg: \"Your query has been saved\",\r\n  search: \"Search\",\r\n  searchTitle: \"Show me all the companies...\",\r\n  searchTitleTip: \"Click to expand\",\r\n  where: \"where\",\r\n};\r\n\r\nexport default translations;\r\n","import I18nStrings from \"./en_US\";\r\n\r\n// Very simple I18n implementation for all the text strings\r\n// TODO: Use a service\r\n\r\nexport const t = (key: keyof typeof I18nStrings): string => {\r\n  return I18nStrings[key];\r\n};\r\n","import { CompanyHighlightCategory } from \"../types/company\";\r\n\r\n/**\r\n * Maps a highlight type to the color to be shown\r\n */\r\n\r\nconst colorMap = {\r\n  [CompanyHighlightCategory.IS_HARMONIC]: \"#81FCED\",\r\n  [CompanyHighlightCategory.MAKES_LOTTA_MONEY]: \"#FFCA58\",\r\n};\r\n\r\nexport const getColor = (highlight: CompanyHighlightCategory) => {\r\n  return colorMap[highlight] ?? \"#6FFFB0\";\r\n};\r\n","import { Company } from \"./company\";\r\n\r\n// Types for a company\r\n\r\nexport type Results = Company[];\r\n\r\nexport enum Field {\r\n  COMPANY,\r\n  DESCRIPTION,\r\n  HIGHLIGHTS,\r\n}\r\n\r\nexport enum Operation {\r\n  CONTAINS,\r\n  DOES_NOT_CONTAIN,\r\n  IS_EXACTLY,\r\n  IS_EMPTY,\r\n  IS_NOT_EMPTY,\r\n}\r\n\r\nexport enum Combination {\r\n  FIRST,\r\n  AND,\r\n  OR,\r\n}\r\n\r\nexport interface QueryClause {\r\n  id: string;\r\n  field: Field;\r\n  operation: Operation;\r\n  operand?: string;\r\n  combination: Combination;\r\n}\r\n\r\nexport type Query = QueryClause[];\r\n\r\nexport const DEFAULT_FIELD = Field.COMPANY;\r\nexport const DEFAULT_OPERATION = Operation.CONTAINS;\r\n","import styled from \"styled-components\";\r\nimport { Highlight } from \"../types/company\";\r\nimport { Text } from \"grommet\";\r\nimport { getColor } from \"../setup/company\";\r\n\r\nconst Wrapper = styled.div`\r\n  border-radius: 8px;\r\n  padding: 4px 8px;\r\n  background: ${(props) => props.color};\r\n  display: inline-block;\r\n  margin-right: 4px;\r\n`;\r\n\r\ninterface Props {\r\n  highlight: Highlight;\r\n}\r\n\r\n/**\r\n * Shows a pill component for a company highlight\r\n */\r\nconst Pill = ({ highlight }: Props) => {\r\n  return (\r\n    <Wrapper color={getColor(highlight.category)}>\r\n      <Text size=\"small\">{highlight.text ?? highlight.category}</Text>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Pill;\r\n","import { TableCell, TableRow, Text } from \"grommet\";\r\nimport { Company } from \"../types/company\";\r\nimport Pill from \"./Pill\";\r\n\r\ninterface Props {\r\n  company: Company;\r\n}\r\n\r\n/**\r\n * Shows a company's information as part of a search result\r\n */\r\nconst CompanyResult = ({ company }: Props) => {\r\n  return (\r\n    <TableRow>\r\n      <TableCell scope=\"row\">\r\n        <Text weight=\"bold\">{company.name}</Text>\r\n      </TableCell>\r\n      <TableCell scope=\"row\">\r\n        <Text>{company.description}</Text>\r\n      </TableCell>\r\n      <TableCell>\r\n        {company.highlights.map((highlight) => (\r\n          <Pill highlight={highlight} key={highlight.category} />\r\n        ))}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default CompanyResult;\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHeader,\r\n  TableRow,\r\n  Text,\r\n} from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\nimport { Results } from \"../types/search\";\r\nimport CompanyResult from \"./CompanyResult\";\r\n\r\ninterface Props {\r\n  results: Results;\r\n}\r\n\r\n/**\r\n * Shows a list of all the company search results\r\n */\r\nconst SearchResults = ({ results }: Props) => {\r\n  return (\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow>\r\n          <TableCell scope=\"col\" border=\"bottom\">\r\n            <Text>{t(\"nameHeader\")}</Text>\r\n          </TableCell>\r\n          <TableCell scope=\"col\" border=\"bottom\">\r\n            <Text>{t(\"descriptionHeader\")}</Text>\r\n          </TableCell>\r\n          <TableCell scope=\"col\" border=\"bottom\">\r\n            <Text>{t(\"highlightsHeader\")}</Text>\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {results.length ? (\r\n          results.map((result) => (\r\n            <CompanyResult company={result} key={result.id} />\r\n          ))\r\n        ) : (\r\n          <Text>{t(\"noResults\")}</Text>\r\n        )}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import { Box, Button } from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\n\r\ninterface Props {\r\n  onSaveClick: () => void;\r\n  onSearchClick: () => void;\r\n}\r\n\r\n/**\r\n * Bar at the bottom of the search box that shows a couple of buttons for saving and searching\r\n */\r\nconst ButtonBar = ({ onSaveClick, onSearchClick }: Props) => {\r\n  return (\r\n    <Box gap=\"small\" justify=\"end\" direction=\"row\">\r\n      <Button secondary label={t(\"saveAsNewSearch\")} onClick={onSaveClick} />\r\n      <Button primary label={t(\"search\")} onClick={onSearchClick} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ButtonBar;\r\n","import { Field, Operation } from \"../types/search\";\r\nimport I18nStrings from \"../hooks/i18n/en_US\";\r\nimport { Company } from \"../types/company\";\r\n\r\n// Setup how all of the inputs relate to each other\r\n\r\nexport interface ClauseField {\r\n  field: Field;\r\n  label: keyof typeof I18nStrings;\r\n  operations: Operation[];\r\n}\r\n\r\nconst allOperations: Operation[] = [\r\n  Operation.CONTAINS,\r\n  Operation.DOES_NOT_CONTAIN,\r\n  Operation.IS_EMPTY,\r\n  Operation.IS_EXACTLY,\r\n  Operation.IS_NOT_EMPTY,\r\n];\r\n\r\nconst binaryOperations: Operation[] = [\r\n  Operation.IS_EMPTY,\r\n  Operation.IS_NOT_EMPTY,\r\n];\r\n\r\nexport const fieldSetup: ClauseField[] = [\r\n  { field: Field.COMPANY, operations: allOperations, label: \"companyName\" },\r\n  { field: Field.DESCRIPTION, operations: allOperations, label: \"description\" },\r\n  {\r\n    field: Field.HIGHLIGHTS,\r\n    operations: binaryOperations,\r\n    label: \"highlights\",\r\n  },\r\n];\r\n\r\ninterface OperationSetup {\r\n  showOperand: boolean;\r\n  label: keyof typeof I18nStrings;\r\n}\r\n\r\nexport const operationsSetup: Record<Operation, OperationSetup> = {\r\n  [Operation.CONTAINS]: { showOperand: true, label: \"contains\" },\r\n  [Operation.DOES_NOT_CONTAIN]: { showOperand: true, label: \"doesNotContain\" },\r\n  [Operation.IS_EMPTY]: { showOperand: false, label: \"isEmpty\" },\r\n  [Operation.IS_EXACTLY]: { showOperand: true, label: \"isExactly\" },\r\n  [Operation.IS_NOT_EMPTY]: { showOperand: false, label: \"isNotEmpty\" },\r\n};\r\n\r\nexport const fieldMap: Record<Field, keyof Company> = {\r\n  [Field.COMPANY]: \"name\",\r\n  [Field.DESCRIPTION]: \"description\",\r\n  [Field.HIGHLIGHTS]: \"highlights\", // TODO: special handling for this field\r\n};\r\n","import { Menu, Select, TextInput, Text, Box } from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\nimport { Combination, Operation, QueryClause } from \"../types/search\";\r\nimport { fieldSetup, operationsSetup } from \"../setup/clause\";\r\n\r\ninterface Props {\r\n  clause: QueryClause;\r\n  onDelete: () => void;\r\n  onChange: (clause: QueryClause) => void;\r\n}\r\n\r\n/**\r\n * Shows a line for one clause in a search query\r\n * Shows the combination operation (AND/OR)\r\n * Shows the field to search\r\n * Shows the operation to do on that search\r\n * Shows an operand if the operation needs one\r\n *\r\n * State is handled up the tree\r\n */\r\nconst Clause = ({ clause, onDelete, onChange }: Props) => {\r\n  const fieldLabels = fieldSetup.map((field) => t(field.label));\r\n\r\n  const field = fieldSetup[clause.field];\r\n\r\n  const handleFieldChange = (newFieldName: string) => {\r\n    const newField = fieldSetup.find((item) => t(item.label) === newFieldName);\r\n\r\n    if (newField) {\r\n      onChange(Object.assign(clause, { field: newField.field }));\r\n    }\r\n  };\r\n\r\n  const handleOperationChange = (newOperation: Operation) => {\r\n    onChange(Object.assign(clause, { operation: newOperation }));\r\n  };\r\n\r\n  const handleOperandChange = (newOperand: string) => {\r\n    onChange(Object.assign(clause, { operand: newOperand }));\r\n  };\r\n\r\n  const leftLabel = t(\r\n    clause.combination === Combination.FIRST\r\n      ? \"where\"\r\n      : clause.combination === Combination.AND\r\n      ? \"and\"\r\n      : \"or\"\r\n  );\r\n\r\n  return (\r\n    <Box direction=\"row\" gap=\"small\" align=\"center\">\r\n      <Box align=\"center\" width=\"xsmall\" alignContent=\"start\">\r\n        <Text>{leftLabel}</Text>\r\n      </Box>\r\n      <Box>\r\n        <Select\r\n          options={fieldLabels}\r\n          value={t(field.label)}\r\n          onChange={({ value }) => handleFieldChange(value)}\r\n        />\r\n      </Box>\r\n      <Box>\r\n        <Select\r\n          options={field.operations}\r\n          labelKey={(item: Operation) => {\r\n            return t(operationsSetup[item].label);\r\n          }}\r\n          value={operationsSetup[clause.operation]}\r\n          onChange={({ value }) => handleOperationChange(value)}\r\n          valueLabel={\r\n            <Box pad=\"small\">\r\n              <Text>{t(operationsSetup[clause.operation].label)}</Text>\r\n            </Box>\r\n          }\r\n        />\r\n      </Box>\r\n      {operationsSetup[clause.operation].showOperand && (\r\n        <Box>\r\n          <TextInput\r\n            placeholder=\"...\"\r\n            value={clause.operand ?? \"\"}\r\n            onChange={(event) => handleOperandChange(event.target.value)}\r\n          />\r\n        </Box>\r\n      )}\r\n      {clause.combination !== Combination.FIRST && (\r\n        <Box>\r\n          <Menu\r\n            label={\"...\"}\r\n            items={[{ label: t(\"delete\"), onClick: onDelete }]}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Clause;\r\n","import { Menu } from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\nimport { Query, QueryClause } from \"../types/search\";\r\nimport Clause from \"./Clause\";\r\n\r\ninterface Props {\r\n  query: Query;\r\n  onAddNewAnd: () => void;\r\n  onAddNewOr: () => void;\r\n  onDelete: (id: string) => void;\r\n  onChange: (query: Query) => void;\r\n}\r\n\r\n/**\r\n *  Shows the clauses that make up a search query\r\n *\r\n *  The current query state is stored here\r\n */\r\nconst Clauses = ({\r\n  query,\r\n  onAddNewAnd,\r\n  onAddNewOr,\r\n  onDelete,\r\n  onChange,\r\n}: Props) => {\r\n  const handleClauseChange = (newClause: QueryClause) => {\r\n    onChange(\r\n      query.map((clause) => (clause.id !== newClause.id ? clause : newClause))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {query.map((clause, index) => (\r\n        <Clause\r\n          clause={clause}\r\n          key={index}\r\n          onDelete={() => onDelete(clause.id)}\r\n          onChange={handleClauseChange}\r\n        />\r\n      ))}\r\n      <Menu\r\n        label={t(\"addNew\")}\r\n        items={[\r\n          { label: t(\"and\"), onClick: onAddNewAnd },\r\n          { label: t(\"or\"), onClick: onAddNewOr },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clauses;\r\n","import { t } from \"../hooks/i18n/i18n\";\r\nimport { Text } from \"grommet\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderText = styled(Text)`\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface Props {\r\n  onClick: () => void;\r\n}\r\n\r\n/**\r\n * Header for the search box. Doubles up as the button to open the search box\r\n */\r\nconst SearchHeader = ({ onClick }: Props) => {\r\n  return <HeaderText onClick={onClick}>{t(\"searchTitle\")}</HeaderText>;\r\n};\r\n\r\nexport default SearchHeader;\r\n","import { Card, CardBody, CardHeader } from \"grommet\";\r\nimport { useState, Dispatch, SetStateAction } from \"react\";\r\nimport {\r\n  Combination,\r\n  DEFAULT_FIELD,\r\n  DEFAULT_OPERATION,\r\n  Query,\r\n} from \"../types/search\";\r\nimport ButtonBar from \"./ButtonBar\";\r\nimport Clauses from \"./Clauses\";\r\nimport SearchHeader from \"./SearchHeader\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\ninterface Props {\r\n  onSaveClick: (query: Query) => void;\r\n  onSearchClick: (query: Query) => void;\r\n  open: boolean;\r\n  setOpen: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n/**\r\n * Box that contains the search query builder\r\n */\r\nconst SearchBox = ({ onSaveClick, onSearchClick, open, setOpen }: Props) => {\r\n  const [query, setQuery] = useState<Query>([\r\n    {\r\n      id: uuidv4(),\r\n      field: DEFAULT_FIELD,\r\n      combination: Combination.FIRST,\r\n      operation: DEFAULT_OPERATION,\r\n    },\r\n  ]);\r\n\r\n  // Toggle the search box through clicking on the header\r\n  const handleClick = () => setOpen((value) => !value);\r\n\r\n  const handleAddNewOr = () => {\r\n    setQuery((oldQuery) => [\r\n      ...oldQuery,\r\n      {\r\n        id: uuidv4(),\r\n        field: DEFAULT_FIELD,\r\n        operation: DEFAULT_OPERATION,\r\n        combination: Combination.OR,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleAddNewAnd = () => {\r\n    setQuery((oldQuery) => [\r\n      ...oldQuery,\r\n      {\r\n        id: uuidv4(),\r\n        field: DEFAULT_FIELD,\r\n        operation: DEFAULT_OPERATION,\r\n        combination: Combination.AND,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleQueryChange = (newQuery: Query) => {\r\n    setQuery(newQuery);\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    setQuery((oldQuery) => oldQuery.filter((clause) => clause.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Card width=\"full\" background=\"light-1\">\r\n      <CardHeader pad=\"medium\" border=\"bottom\">\r\n        <SearchHeader onClick={handleClick} />\r\n      </CardHeader>\r\n      {open && (\r\n        <CardBody animation=\"slideDown\" pad=\"medium\" background=\"light-1\">\r\n          <Clauses\r\n            query={query}\r\n            onAddNewAnd={handleAddNewAnd}\r\n            onAddNewOr={handleAddNewOr}\r\n            onDelete={handleDelete}\r\n            onChange={handleQueryChange}\r\n          />\r\n          <ButtonBar\r\n            onSaveClick={() => onSaveClick(query)}\r\n            onSearchClick={() => onSearchClick(query)}\r\n          />\r\n        </CardBody>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Results } from \"../types/search\";\r\n\r\nconst MOCK_URL =\r\n  window.location.origin + window.location.pathname + \"/mock.json\";\r\n\r\n// Loading states when fetching the data\r\nexport type Status = \"idle\" | \"loading\" | \"complete\" | \"error\";\r\n\r\ninterface UseReadDataResponse {\r\n  status: Status;\r\n  results?: Results;\r\n}\r\n\r\n/**\r\n * Generic hook to read the data from a JSON file on a URL\r\n */\r\nconst useReadData: (url: string) => UseReadDataResponse = (url) => {\r\n  const [status, setStatus] = useState<Status>(\"idle\");\r\n  const [results, setResults] = useState<Results>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setStatus(\"loading\");\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        setResults(data);\r\n        setStatus(\"complete\");\r\n      } catch (e) {\r\n        console.error(e);\r\n        setStatus(\"error\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { status, results };\r\n};\r\n\r\n// Get all of the companies data.\r\n// This application will store all of the data in memory after it is fetched\r\n// and will manipulate the results on the client side\r\n// For speed, mostly.\r\nexport const useGetData = () => {\r\n  return useReadData(MOCK_URL);\r\n};\r\n","import { fieldMap } from \"../setup/clause\";\r\nimport {\r\n  Combination,\r\n  Operation,\r\n  Query,\r\n  QueryClause,\r\n  Results,\r\n} from \"../types/search\";\r\n\r\n// Hook to to save the current query\r\n// TODO: implement this. Will just write to the console for now\r\nexport const useSaveQuery = () => {\r\n  return (query: Query) => {\r\n    console.log(\"Saved query:\", JSON.stringify(query));\r\n    return true;\r\n  };\r\n};\r\n\r\n// Hook to run a search\r\n// TODO: implement all the logic on the results, in memory\r\n\r\nexport const useSearch = () => {\r\n  return (query: Query, results?: Results): Results | undefined => {\r\n    return runQueryOverResults(query, results);\r\n  };\r\n};\r\n\r\nconst runClauseOverResults = (\r\n  clause: QueryClause,\r\n  results?: Results\r\n): Results | undefined => {\r\n  const fieldName = fieldMap[clause.field];\r\n  switch (clause.operation) {\r\n    case Operation.CONTAINS:\r\n      return results?.filter(\r\n        (result) =>\r\n          clause.operand &&\r\n          (result[fieldName] as string)\r\n            ?.toLowerCase()\r\n            .indexOf(clause.operand?.toLowerCase()) > -1\r\n      );\r\n    case Operation.DOES_NOT_CONTAIN:\r\n      return results?.filter(\r\n        (result) =>\r\n          clause.operand &&\r\n          (result[fieldName] as string)\r\n            ?.toLowerCase()\r\n            .indexOf(clause.operand?.toLowerCase()) === -1\r\n      );\r\n    case Operation.IS_EXACTLY:\r\n      return results?.filter(\r\n        (result) =>\r\n          (result[fieldName] as string)?.toLowerCase() ===\r\n          clause.operand?.toLowerCase()\r\n      );\r\n    case Operation.IS_EMPTY:\r\n      return results?.filter((result) => !result[fieldName]);\r\n    case Operation.IS_NOT_EMPTY:\r\n      return results?.filter((result) => Boolean(result[fieldName]));\r\n  }\r\n};\r\n\r\nexport const combine = (a: Results, b: Results): Results => {\r\n  const bIds = new Set();\r\n  b.forEach((result) => bIds.add(result.id));\r\n  return [...a.filter((result) => !bIds.has(result.id)), ...b];\r\n};\r\n\r\nexport const intersect = (a: Results, b: Results): Results => {\r\n  const bIds = new Set();\r\n  b.forEach((result) => bIds.add(result.id));\r\n  return [...a.filter((result) => bIds.has(result.id))];\r\n};\r\n\r\nconst runQueryOverResults = (query: Query, results?: Results): Results | [] => {\r\n  const filteredResults = query.map((clause) =>\r\n    runClauseOverResults(clause, results)\r\n  );\r\n  //combine here\r\n  let accum = filteredResults[0] ?? [];\r\n\r\n  for (let i = 1; i < filteredResults.length; i++) {\r\n    const combination = query[i].combination;\r\n    if (combination === Combination.OR) {\r\n      accum = combine(accum, filteredResults[i] ?? []);\r\n    } else {\r\n      accum = intersect(accum, filteredResults[i] ?? []);\r\n    }\r\n  }\r\n\r\n  return accum;\r\n};\r\n","import SearchResults from \"./SearchResults\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { useGetData } from \"../hooks/getData\";\r\nimport { Text, Notification, Spinner } from \"grommet\";\r\nimport { Query } from \"../types/search\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSaveQuery, useSearch } from \"../hooks/search\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\n\r\n/**\r\n * Container for the search box and search results. Stores the results state.\r\n */\r\nconst SearchContainer = () => {\r\n  const { status, results } = useGetData();\r\n  const [searchResults, setSearchResults] = useState(results);\r\n  const [showSaveNotification, setShowSaveNotification] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const saveQuery = useSaveQuery();\r\n  const search = useSearch();\r\n\r\n  // Set the initial search results to all of the results when they arrive\r\n  useEffect(() => {\r\n    setSearchResults(results);\r\n  }, [results]);\r\n\r\n  const handleSaveClick = (query: Query) => {\r\n    saveQuery(query);\r\n    setOpen(false);\r\n    setShowSaveNotification(true);\r\n  };\r\n\r\n  const handleSearchClick = (query: Query) => {\r\n    setOpen(false);\r\n    const newSearchResults = search(query, results);\r\n    setSearchResults(newSearchResults);\r\n  };\r\n\r\n  if (status === \"error\") {\r\n    return <Text color=\"status-error\">{t(\"error\")}</Text>;\r\n  }\r\n\r\n  if (status === \"loading\") {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchBox\r\n        onSaveClick={handleSaveClick}\r\n        onSearchClick={handleSearchClick}\r\n        open={open}\r\n        setOpen={setOpen}\r\n      />\r\n      {searchResults && <SearchResults results={searchResults} />}\r\n      {showSaveNotification && (\r\n        <Notification\r\n          toast\r\n          title={t(\"saveNotificationTitle\")}\r\n          message={t(\"saveNotificationMsg\")}\r\n          onClose={() => setShowSaveNotification(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchContainer;\r\n","import { Box } from \"grommet\";\r\nimport SearchContainer from \"./SearchContainer\";\r\n\r\n/**\r\n * Component to hold the take-home test for Harmonic\r\n */\r\nconst TakeHome = () => {\r\n  return (\r\n    <Box pad=\"medium\">\r\n      <SearchContainer />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TakeHome;\r\n","import TakeHome from \"./components/TakeHome\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TakeHome />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}