{"version":3,"sources":["types/company.ts","hooks/i18n/en_US.ts","hooks/i18n/i18n.ts","setup/company.ts","types/search.ts","components/Pill.tsx","components/CompanyResult.tsx","components/SearchResults.tsx","components/ButtonBar.tsx","setup/clause.ts","components/Clause.tsx","components/Clauses.tsx","components/SearchHeader.tsx","components/SearchBox.tsx","hooks/getData.ts","components/SearchContainer.tsx","hooks/i18n/search.ts","components/TakeHome.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CompanyHighlightCategory","translations","addNew","and","companyName","contains","delete","descriptionHeader","doesNotContain","error","highlightsHeader","isEmpty","isExactly","isNotEmpty","nameHeader","noResults","or","saveAsNewSearch","saveNotificationTitle","saveNotificationMsg","search","searchTitle","searchTitleTip","where","t","key","I18nStrings","Field","Operation","Combination","colorMap","IS_HARMONIC","MAKES_LOTTA_MONEY","getColor","highlight","Wrapper","styled","div","props","color","Pill","category","Text","size","text","CompanyResult","company","TableRow","TableCell","scope","weight","name","description","highlights","map","SearchResults","results","Table","TableHeader","border","TableBody","length","result","id","DEFAULT_FIELD","COMPANY","DEFAULT_OPERATION","CONTAINS","ButtonBar","onSaveClick","onSearchClick","Box","gap","justify","direction","Button","secondary","label","onClick","primary","allOperations","DOES_NOT_CONTAIN","IS_EMPTY","IS_EXACTLY","IS_NOT_EMPTY","fieldSetup","field","operations","operationsSetup","showOperand","Clause","clause","onDelete","onChange","fieldLabels","handleFieldChange","newFieldName","newField","find","item","Object","assign","handleOperationChange","newOperation","operation","handleOperandChange","newOperand","operand","leftLabel","combination","FIRST","AND","align","width","alignContent","Select","options","value","labelKey","valueLabel","pad","TextInput","placeholder","event","target","Menu","items","Clauses","query","onAddNewAnd","onAddNewOr","handleClauseChange","newClause","filter","index","HeaderText","SearchHeader","SearchBox","open","setOpen","useState","uuidv4","setQuery","Card","background","CardHeader","CardBody","animation","oldQuery","OR","newQuery","MOCK_URL","window","location","origin","pathname","useGetData","url","status","setStatus","setResults","useEffect","fetchData","a","fetch","response","json","data","console","useReadData","SearchContainer","searchResults","setSearchResults","showSaveNotification","setShowSaveNotification","saveQuery","log","JSON","stringify","_","Math","random","Spinner","newSearchResults","Notification","toast","title","message","onClose","TakeHome","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.394e5436.chunk.js","sourcesContent":["// Types for company data\r\n\r\nexport interface Highlight {\r\n  category: CompanyHighlightCategory;\r\n  date_added?: Date;\r\n  text?: string;\r\n}\r\n\r\nexport interface Company {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  highlights: Highlight[];\r\n}\r\n\r\nexport enum CompanyHighlightCategory {\r\n  MAKES_LOTTA_MONEY = \"MAKES_LOTTA_MONEY\",\r\n  IS_HARMONIC = \"IS_HARMNOIC\", // [sic]\r\n}\r\n","const translations = {\r\n  addNew: \"+ Add New Filter\",\r\n  and: \"AND\",\r\n  companyName: \"Company Name\",\r\n  contains: \"Contains\",\r\n  delete: \"Delete\",\r\n  descriptionHeader: \"Description\",\r\n  doesNotContain: \"Does not contain\",\r\n  error: \"An error has occurred\",\r\n  highlightsHeader: \"Highlights\",\r\n  isEmpty: \"Is Empty\",\r\n  isExactly: \"Is exactly\",\r\n  isNotEmpty: \"Is not empty\",\r\n  nameHeader: \"Name\",\r\n  noResults: \"No Results\",\r\n  or: \"OR\",\r\n  saveAsNewSearch: \"Save as new search\",\r\n  saveNotificationTitle: \"Notification\",\r\n  saveNotificationMsg: \"Your query has been saved\",\r\n  search: \"Search\",\r\n  searchTitle: \"Show me all the companies...\",\r\n  searchTitleTip: \"Click to expand\",\r\n  where: \"where\",\r\n};\r\n\r\nexport default translations;\r\n","import I18nStrings from \"./en_US\";\r\n\r\n// Very simple I18n implementation for all the text strings\r\n// TODO: Use a service\r\n\r\nexport const t = (key: keyof typeof I18nStrings): string => {\r\n  return I18nStrings[key];\r\n};\r\n","import { CompanyHighlightCategory } from \"../types/company\";\r\n\r\n/**\r\n * Maps a highlight type to the color to be shown\r\n */\r\n\r\nconst colorMap = {\r\n  [CompanyHighlightCategory.IS_HARMONIC]: \"#81FCED\",\r\n  [CompanyHighlightCategory.MAKES_LOTTA_MONEY]: \"#FFCA58\",\r\n};\r\n\r\nexport const getColor = (highlight: CompanyHighlightCategory) => {\r\n  return colorMap[highlight] ?? \"#6FFFB0\";\r\n};\r\n","import { Company } from \"./company\";\r\n\r\n// Types for a company\r\n\r\nexport type Results = Company[];\r\n\r\nexport enum Field {\r\n  COMPANY,\r\n}\r\n\r\nexport enum Operation {\r\n  CONTAINS,\r\n  DOES_NOT_CONTAIN,\r\n  IS_EXACTLY,\r\n  IS_EMPTY,\r\n  IS_NOT_EMPTY,\r\n}\r\n\r\nexport enum Combination {\r\n  FIRST,\r\n  AND,\r\n  OR,\r\n}\r\n\r\nexport interface QueryClause {\r\n  id: string;\r\n  field: Field;\r\n  operation: Operation;\r\n  operand?: string;\r\n  combination: Combination;\r\n}\r\n\r\nexport type Query = QueryClause[];\r\n\r\nexport const DEFAULT_FIELD = Field.COMPANY;\r\nexport const DEFAULT_OPERATION = Operation.CONTAINS;\r\n","import styled from \"styled-components\";\r\nimport { Highlight } from \"../types/company\";\r\nimport { Text } from \"grommet\";\r\nimport { getColor } from \"../setup/company\";\r\n\r\nconst Wrapper = styled.div`\r\n  border-radius: 8px;\r\n  padding: 4px 8px;\r\n  background: ${(props) => props.color};\r\n  display: inline-block;\r\n  margin-right: 4px;\r\n`;\r\n\r\ninterface Props {\r\n  highlight: Highlight;\r\n}\r\n\r\n/**\r\n * Shows a pill component for a company highlight\r\n */\r\nconst Pill = ({ highlight }: Props) => {\r\n  return (\r\n    <Wrapper color={getColor(highlight.category)}>\r\n      <Text size=\"small\">{highlight.text ?? highlight.category}</Text>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Pill;\r\n","import { TableCell, TableRow, Text } from \"grommet\";\r\nimport { Company } from \"../types/company\";\r\nimport Pill from \"./Pill\";\r\n\r\ninterface Props {\r\n  company: Company;\r\n}\r\n\r\n/**\r\n * Shows a company's information as part of a search result\r\n */\r\nconst CompanyResult = ({ company }: Props) => {\r\n  return (\r\n    <TableRow>\r\n      <TableCell scope=\"row\">\r\n        <Text weight=\"bold\">{company.name}</Text>\r\n      </TableCell>\r\n      <TableCell scope=\"row\">\r\n        <Text>{company.description}</Text>\r\n      </TableCell>\r\n      <TableCell>\r\n        {company.highlights.map((highlight) => (\r\n          <Pill highlight={highlight} key={highlight.category} />\r\n        ))}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default CompanyResult;\r\n","import {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHeader,\r\n  TableRow,\r\n  Text,\r\n} from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\nimport { Results } from \"../types/search\";\r\nimport CompanyResult from \"./CompanyResult\";\r\n\r\ninterface Props {\r\n  results: Results;\r\n}\r\n\r\n/**\r\n * Shows a list of all the company search results\r\n */\r\nconst SearchResults = ({ results }: Props) => {\r\n  return (\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow>\r\n          <TableCell scope=\"col\" border=\"bottom\">\r\n            <Text>{t(\"nameHeader\")}</Text>\r\n          </TableCell>\r\n          <TableCell scope=\"col\" border=\"bottom\">\r\n            <Text>{t(\"descriptionHeader\")}</Text>\r\n          </TableCell>\r\n          <TableCell scope=\"col\" border=\"bottom\">\r\n            <Text>{t(\"highlightsHeader\")}</Text>\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {results.length ? (\r\n          results.map((result) => (\r\n            <CompanyResult company={result} key={result.id} />\r\n          ))\r\n        ) : (\r\n          <Text>{t(\"noResults\")}</Text>\r\n        )}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import { Box, Button } from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\n\r\ninterface Props {\r\n  onSaveClick: () => void;\r\n  onSearchClick: () => void;\r\n}\r\n\r\n/**\r\n * Bar at the bottom of the search box that shows a couple of buttons for saving and searching\r\n */\r\nconst ButtonBar = ({ onSaveClick, onSearchClick }: Props) => {\r\n  return (\r\n    <Box gap=\"small\" justify=\"end\" direction=\"row\">\r\n      <Button secondary label={t(\"saveAsNewSearch\")} onClick={onSaveClick} />\r\n      <Button primary label={t(\"search\")} onClick={onSearchClick} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ButtonBar;\r\n","import { Field, Operation } from \"../types/search\";\r\nimport I18nStrings from \"../hooks/i18n/en_US\";\r\n\r\n// Setup how all of the inputs relate to each other\r\n\r\nexport interface ClauseField {\r\n  field: Field;\r\n  label: keyof typeof I18nStrings;\r\n  operations: Operation[];\r\n}\r\n\r\nconst allOperations: Operation[] = [\r\n  Operation.CONTAINS,\r\n  Operation.DOES_NOT_CONTAIN,\r\n  Operation.IS_EMPTY,\r\n  Operation.IS_EXACTLY,\r\n  Operation.IS_NOT_EMPTY,\r\n];\r\n\r\nexport const fieldSetup: ClauseField[] = [\r\n  { field: Field.COMPANY, operations: allOperations, label: \"companyName\" },\r\n];\r\n\r\ninterface OperationSetup {\r\n  showOperand: boolean;\r\n  label: keyof typeof I18nStrings;\r\n}\r\n\r\nexport const operationsSetup: Record<Operation, OperationSetup> = {\r\n  [Operation.CONTAINS]: { showOperand: true, label: \"contains\" },\r\n  [Operation.DOES_NOT_CONTAIN]: { showOperand: true, label: \"doesNotContain\" },\r\n  [Operation.IS_EMPTY]: { showOperand: false, label: \"isEmpty\" },\r\n  [Operation.IS_EXACTLY]: { showOperand: true, label: \"isExactly\" },\r\n  [Operation.IS_NOT_EMPTY]: { showOperand: false, label: \"isNotEmpty\" },\r\n};\r\n","import { Menu, Select, TextInput, Text, Box } from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\nimport { Combination, Operation, QueryClause } from \"../types/search\";\r\nimport { fieldSetup, operationsSetup } from \"../setup/clause\";\r\n\r\ninterface Props {\r\n  clause: QueryClause;\r\n  onDelete: () => void;\r\n  onChange: (clause: QueryClause) => void;\r\n}\r\n\r\n/**\r\n * Shows a line for one clause in a search query\r\n * Shows the combination operation (AND/OR)\r\n * Shows the field to search\r\n * Shows the operation to do on that search\r\n * Shows an operand if the operation needs one\r\n *\r\n * State is handled up the tree\r\n */\r\nconst Clause = ({ clause, onDelete, onChange }: Props) => {\r\n  const fieldLabels = fieldSetup.map((field) => t(field.label));\r\n\r\n  const field = fieldSetup[clause.field];\r\n\r\n  const handleFieldChange = (newFieldName: string) => {\r\n    const newField = fieldSetup.find((item) => item.label === newFieldName);\r\n\r\n    if (newField) {\r\n      onChange(Object.assign(clause, { field: newField }));\r\n    }\r\n  };\r\n\r\n  const handleOperationChange = (newOperation: Operation) => {\r\n    onChange(Object.assign(clause, { operation: newOperation }));\r\n  };\r\n\r\n  const handleOperandChange = (newOperand: string) => {\r\n    onChange(Object.assign(clause, { operand: newOperand }));\r\n  };\r\n\r\n  const leftLabel = t(\r\n    clause.combination === Combination.FIRST\r\n      ? \"where\"\r\n      : clause.combination === Combination.AND\r\n      ? \"and\"\r\n      : \"or\"\r\n  );\r\n\r\n  return (\r\n    <Box direction=\"row\" gap=\"small\" align=\"center\">\r\n      <Box align=\"center\" width=\"xsmall\" alignContent=\"start\">\r\n        <Text>{leftLabel}</Text>\r\n      </Box>\r\n      <Box>\r\n        <Select\r\n          options={fieldLabels}\r\n          value={t(field.label)}\r\n          onChange={({ value }) => handleFieldChange(value)}\r\n        />\r\n      </Box>\r\n      <Box>\r\n        <Select\r\n          options={field.operations}\r\n          labelKey={(item: Operation) => {\r\n            return t(operationsSetup[item].label);\r\n          }}\r\n          value={operationsSetup[clause.operation]}\r\n          onChange={({ value }) => handleOperationChange(value)}\r\n          valueLabel={\r\n            <Box pad=\"small\">\r\n              <Text>{t(operationsSetup[clause.operation].label)}</Text>\r\n            </Box>\r\n          }\r\n        />\r\n      </Box>\r\n      {operationsSetup[clause.operation].showOperand && (\r\n        <Box>\r\n          <TextInput\r\n            placeholder=\"...\"\r\n            value={clause.operand}\r\n            onChange={(event) => handleOperandChange(event.target.value)}\r\n          />\r\n        </Box>\r\n      )}\r\n      {clause.combination !== Combination.FIRST && (\r\n        <Box>\r\n          <Menu\r\n            label={\"...\"}\r\n            items={[{ label: t(\"delete\"), onClick: onDelete }]}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Clause;\r\n","import { Menu } from \"grommet\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\nimport { Query, QueryClause } from \"../types/search\";\r\nimport Clause from \"./Clause\";\r\n\r\ninterface Props {\r\n  query: Query;\r\n  onAddNewAnd: () => void;\r\n  onAddNewOr: () => void;\r\n  onDelete: (id: string) => void;\r\n  onChange: (query: Query) => void;\r\n}\r\n\r\n/**\r\n *  Shows the clauses that make up a search query\r\n *\r\n *  The current query state is stored here\r\n */\r\nconst Clauses = ({\r\n  query,\r\n  onAddNewAnd,\r\n  onAddNewOr,\r\n  onDelete,\r\n  onChange,\r\n}: Props) => {\r\n  const handleClauseChange = (newClause: QueryClause) => {\r\n    onChange([\r\n      ...query.filter((clause) => clause.id !== newClause.id),\r\n      newClause,\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {query.map((clause, index) => (\r\n        <Clause\r\n          clause={clause}\r\n          key={index}\r\n          onDelete={() => onDelete(clause.id)}\r\n          onChange={handleClauseChange}\r\n        />\r\n      ))}\r\n      <Menu\r\n        label={t(\"addNew\")}\r\n        items={[\r\n          { label: t(\"and\"), onClick: onAddNewAnd },\r\n          { label: t(\"or\"), onClick: onAddNewOr },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clauses;\r\n","import { t } from \"../hooks/i18n/i18n\";\r\nimport { Text } from \"grommet\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderText = styled(Text)`\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface Props {\r\n  onClick: () => void;\r\n}\r\n\r\n/**\r\n * Header for the search box. Doubles up as the button to open the search box\r\n */\r\nconst SearchHeader = ({ onClick }: Props) => {\r\n  return <HeaderText onClick={onClick}>{t(\"searchTitle\")}</HeaderText>;\r\n};\r\n\r\nexport default SearchHeader;\r\n","import { Card, CardBody, CardHeader } from \"grommet\";\r\nimport { useState, Dispatch, SetStateAction } from \"react\";\r\nimport {\r\n  Combination,\r\n  DEFAULT_FIELD,\r\n  DEFAULT_OPERATION,\r\n  Query,\r\n} from \"../types/search\";\r\nimport ButtonBar from \"./ButtonBar\";\r\nimport Clauses from \"./Clauses\";\r\nimport SearchHeader from \"./SearchHeader\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\ninterface Props {\r\n  onSaveClick: (query: Query) => void;\r\n  onSearchClick: (query: Query) => void;\r\n  open: boolean;\r\n  setOpen: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\n/**\r\n * Box that contains the search query builder\r\n */\r\nconst SearchBox = ({ onSaveClick, onSearchClick, open, setOpen }: Props) => {\r\n  const [query, setQuery] = useState<Query>([\r\n    {\r\n      id: uuidv4(),\r\n      field: DEFAULT_FIELD,\r\n      combination: Combination.FIRST,\r\n      operation: DEFAULT_OPERATION,\r\n    },\r\n  ]);\r\n\r\n  // Toggle the search box through clicking on the header\r\n  const handleClick = () => setOpen((value) => !value);\r\n\r\n  const handleAddNewOr = () => {\r\n    setQuery((oldQuery) => [\r\n      ...oldQuery,\r\n      {\r\n        id: uuidv4(),\r\n        field: DEFAULT_FIELD,\r\n        operation: DEFAULT_OPERATION,\r\n        combination: Combination.OR,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleAddNewAnd = () => {\r\n    setQuery((oldQuery) => [\r\n      ...oldQuery,\r\n      {\r\n        id: uuidv4(),\r\n        field: DEFAULT_FIELD,\r\n        operation: DEFAULT_OPERATION,\r\n        combination: Combination.AND,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleQueryChange = (newQuery: Query) => {\r\n    setQuery(newQuery);\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    setQuery((oldQuery) => oldQuery.filter((clause) => clause.id !== id));\r\n  };\r\n\r\n  return (\r\n    <Card width=\"full\" background=\"light-1\">\r\n      <CardHeader pad=\"medium\" border=\"bottom\">\r\n        <SearchHeader onClick={handleClick} />\r\n      </CardHeader>\r\n      {open && (\r\n        <CardBody animation=\"slideDown\" pad=\"medium\" background=\"light-1\">\r\n          <Clauses\r\n            query={query}\r\n            onAddNewAnd={handleAddNewAnd}\r\n            onAddNewOr={handleAddNewOr}\r\n            onDelete={handleDelete}\r\n            onChange={handleQueryChange}\r\n          />\r\n          <ButtonBar\r\n            onSaveClick={() => onSaveClick(query)}\r\n            onSearchClick={() => onSearchClick(query)}\r\n          />\r\n        </CardBody>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Results } from \"../types/search\";\r\n\r\nconst MOCK_URL =\r\n  window.location.origin + window.location.pathname + \"/mock.json\";\r\n\r\n// Loading states when fetching the data\r\nexport type Status = \"idle\" | \"loading\" | \"complete\" | \"error\";\r\n\r\ninterface UseReadDataResponse {\r\n  status: Status;\r\n  results?: Results;\r\n}\r\n\r\n/**\r\n * Generic hook to read the data from a JSON file on a URL\r\n */\r\nconst useReadData: (url: string) => UseReadDataResponse = (url) => {\r\n  const [status, setStatus] = useState<Status>(\"idle\");\r\n  const [results, setResults] = useState<Results>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setStatus(\"loading\");\r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        setResults(data);\r\n        setStatus(\"complete\");\r\n      } catch (e) {\r\n        console.error(e);\r\n        setStatus(\"error\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { status, results };\r\n};\r\n\r\n// Get all of the companies data.\r\n// This application will store all of the data in memory after it is fetched\r\n// and will manipulate the results on the client side\r\n// For speed, mostly.\r\nexport const useGetData = () => {\r\n  return useReadData(MOCK_URL);\r\n};\r\n","import SearchResults from \"./SearchResults\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { useGetData } from \"../hooks/getData\";\r\nimport { Text, Notification, Spinner } from \"grommet\";\r\nimport { Query } from \"../types/search\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSaveQuery, useSearch } from \"../hooks/i18n/search\";\r\nimport { t } from \"../hooks/i18n/i18n\";\r\n\r\n/**\r\n * Container for the search box and search results. Stores the results state.\r\n */\r\nconst SearchContainer = () => {\r\n  const { status, results } = useGetData();\r\n  const [searchResults, setSearchResults] = useState(results);\r\n  const [showSaveNotification, setShowSaveNotification] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const saveQuery = useSaveQuery();\r\n  const search = useSearch();\r\n\r\n  // Set the initial search results to all of the results when they arrive\r\n  useEffect(() => {\r\n    setSearchResults(results);\r\n  }, [results]);\r\n\r\n  const handleSaveClick = (query: Query) => {\r\n    saveQuery(query);\r\n    setOpen(false);\r\n    setShowSaveNotification(true);\r\n  };\r\n\r\n  const handleSearchClick = (query: Query) => {\r\n    setOpen(false);\r\n    const newSearchResults = search(query, results);\r\n    setSearchResults(newSearchResults);\r\n  };\r\n\r\n  if (status === \"error\") {\r\n    return <Text color=\"status-error\">{t(\"error\")}</Text>;\r\n  }\r\n\r\n  if (status === \"loading\") {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchBox\r\n        onSaveClick={handleSaveClick}\r\n        onSearchClick={handleSearchClick}\r\n        open={open}\r\n        setOpen={setOpen}\r\n      />\r\n      {searchResults && <SearchResults results={searchResults} />}\r\n      {showSaveNotification && (\r\n        <Notification\r\n          toast\r\n          title={t(\"saveNotificationTitle\")}\r\n          message={t(\"saveNotificationMsg\")}\r\n          onClose={() => setShowSaveNotification(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchContainer;\r\n","import { Query, Results } from \"../../types/search\";\r\n\r\n// Hook to to save the current query\r\n// TODO: implement this. Will just write to the console for now\r\nexport const useSaveQuery = () => {\r\n  return (query: Query) => {\r\n    console.log(\"Saved query:\", JSON.stringify(query));\r\n    return true;\r\n  };\r\n};\r\n\r\n// Hook to run a search\r\n// TODO: implement all the logic on the results, in memory\r\n\r\nexport const useSearch = () => {\r\n  return (query: Query, results?: Results) => {\r\n    // Just return random results for now\r\n    return results?.filter((_) => Math.random() > 0.5);\r\n  };\r\n};\r\n","import { Box } from \"grommet\";\r\nimport SearchContainer from \"./SearchContainer\";\r\n\r\n/**\r\n * Component to hold the take-home test for Harmonic\r\n */\r\nconst TakeHome = () => {\r\n  return (\r\n    <Box pad=\"medium\">\r\n      <SearchContainer />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TakeHome;\r\n","import TakeHome from \"./components/TakeHome\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TakeHome />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}